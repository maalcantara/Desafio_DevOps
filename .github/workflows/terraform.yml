name: Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.0

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

      # verifica se o resource group já existe. Se já, dar o destroy pra depois apply
    - name: Terraform Check if resource exists
      id: check_resource
      working-directory: ./terraform
      run: |
        if terraform show -json | jq '.values.root_module.resources[] | select(.type == "azurerm_resource_roup")' > /dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi

    - name: Terraform Destroy
      if: steps.check_resource.outputs.exists == 'true'
      working-directory: ./terraform
      run: terraform destroy -auto-approve

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=deploy_plan.tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v2
      with:
        name: deploy_plan
        path: ./terraform/deploy_plan.tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve ./deploy_plan.tfplan
